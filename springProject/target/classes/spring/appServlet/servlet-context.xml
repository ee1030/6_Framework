<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	<!--
		DispatcherServlet : HTTP를 이용해 들어오는 모든 요청을 프레젠테이션 계층 제일 앞에 두어
												중앙 집중식 처리를 해주는 프론트 컨트롤러  
	-->
	
	<!-- Handler Mapping : 요청 받은 주소에 맞는 클래스 or 메소드를 연결하는 역할 
			xml에 작성하여 bean 형식으로 등록 가능하지만 비효율적이므로 @(Annotation) 방식을 사용
			-> @Controller, @RequestMapping 두 어노테이션이 Handler Mapping을 대체함
	-->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- annotation-driven : @Controlle에 요청을 보내기 위한 Handler Mapping을 bean으로 등록함.
			해당 태그가 작성 되어야만 @RequestMapping, @ExceptionHandler와 같은 어노테이션을 사용할 수 있다.
	-->
	<annotation-driven />

	<!-- 정적 자원 호출 경로 지정 -->
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	
	<!--  
		View Resolver : Controller에서 반환된 뷰의 이름을 토대로
										처리할(응답화면) view를 검색하는 역할
							
						 접두사(prefix) + 반환된 View 이름 + 접미사(suffix)
						 					/WEB-INF/views/home.jsp
	-->
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- component-scan : 지정된 패키지에 있는 @Component와 그 구체과 요소를 스캔하여
												bean으로 등록하는 태그.
		(bean으로 등록됐다 == 스프링 컨테이너에 의해서 생성된 객체다.
			== 스프링 컨테이너가 제어할 수 있는 객체다.(IOC)
			== bean으로 등록된 객체는 개발자가 별도로 생성하지 않아도
				 스프링 컨테이너에 의해서 필요한 곳에 의존적으로 주입된다.(DI, 의존성 주입)
	-->
	
	<context:component-scan base-package="com.kh.spring" />
	
	
	
</beans:beans>
